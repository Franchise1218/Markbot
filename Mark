import json
import pandas as pd
import sqlite3
import random
import subprocess

# Personalized startup message
print(f"\n🤖 Yo, it's Mark! Welcome back, Jose! Let’s get this damn wrestling data rollin’.")

# Load Excel Sheet (Using Correct File Path)
excel_file = "/Users/josemarrero/Desktop/Cloud Log Ins/MASTER DVD.xlsx"
df = pd.read_excel(excel_file)

# Connect to SQLite (Creates database if it doesn't exist)
conn = sqlite3.connect("mark_database.db")
cursor = conn.cursor()

# Ensure the DVDs table exists
cursor.execute("""
    CREATE TABLE IF NOT EXISTS dvds (
        id INTEGER PRIMARY KEY,
        disc_number TEXT,
        DiscContents TEXT,
        event_number TEXT,
        date TEXT,
        company TEXT,
        cloud TEXT,
        hard_drive TEXT,
        match_listing TEXT
    )
""")
conn.commit()
conn.close()

# Search History for tracking past queries
search_history = []

# Function to search SQL and Excel while ensuring Disc # and DiscContents appear together
def search_sql_data(query):
    global search_history
    search_history.append(query)

    conn = sqlite3.connect("mark_database.db")
    cursor = conn.cursor()

    print(f"\n🔍 Mark is searching for: '{query}'")

    query_parts = query.split()
    disc_number = next((part for part in query_parts if part.isdigit()), None)
    contents_query = " ".join(part for part in query_parts if not part.isdigit())

    results = []

    # Query SQL Database
    if disc_number:
        cursor.execute("SELECT disc_number, DiscContents, event_number, date, company, cloud, match_listing FROM dvds WHERE disc_number = ?", (disc_number,))
        results += cursor.fetchall()
    elif contents_query:
        cursor.execute("SELECT disc_number, DiscContents, event_number, date, company, cloud, match_listing FROM dvds WHERE DiscContents LIKE ?", ('%' + contents_query + '%',))
        results += cursor.fetchall()

    conn.close()

    # Query Excel if SQL is empty
    if not results:
        excel_results = df[df.apply(lambda x: query.lower() in str(x).lower(), axis=1)]
        results += excel_results[["Disc #", "DiscContents", "Event Number", "Date", "Company", "CLOUD", "HARD DRIVE"]].values.tolist()

    if results:
        response = f"\n📀 **Here you go, boss. Pulled results for '{query}':**\n"
        response += "\n".join(f"🎬 Disc #: {r[0]} | DiscContents: {r[1]} | Event #: {r[2]} | Date: {r[3]} | Company: {r[4]} | Cloud: {r[5]} | Matches: {r[6]}" for r in results)
    else:
        response = f"\n🛑 **Bruh, that weak-ass search ain't got nothing.** Try again."

    return response

# Function to fetch wrestling match results using the scraper
def get_match_results(event_name):
    conn = sqlite3.connect("mark_database.db")
    cursor = conn.cursor()

    # Check if event is already stored
    cursor.execute("SELECT matches FROM match_results WHERE event_name = ?", (event_name,))
    result = cursor.fetchone()

    if result:
        return f"\n🎤 **Match Results for {event_name}**\n{result[0]}"

    # If not stored, scrape match results
    command = f'Rscript -e "source(\'/Users/josemarrero/MarkBot/smark_scraper.R\'); cat(scrape_event_matches(\'{event_name}\'), sep = \'\\n\')"'
    process = subprocess.run(command, shell=True, capture_output=True, text=True)
    match_data = process.stdout.strip().split("\n")

    if match_data:
        matches_text = "\n".join(match_data)

        # Store results in SQL for future lookups
        cursor.execute("INSERT INTO match_results (event_name, matches) VALUES (?, ?)", (event_name, matches_text))
        conn.commit()
        conn.close()

        return f"\n🎤 **Match Results for {event_name}**\n{matches_text}"
    
    return f"\n🛑 **No match results found for {event_name}. Try again.**"

# Chatbot loop with natural command detection
while True:
    user_input = input("\nAsk me about wrestling data (or type 'show me Disc #', or a wrestling event name): ").strip()
    
    print(f"\n🧐 Debugging Mark's Query: {user_input}")  

    if user_input.lower() in ["exit", "quit"]:
        print(random.choice([
            "👊 Aight, I'm out. You handle yo' business.",
            "🚀 This convo just tapped out—ONE!",
            "🔥 Cool, but I got better things to do. Holla!",
            "💨 Mark is signing off—you deal with yo' mess."
        ]))
        break

    elif "matches for" in user_input or "wrestling event" in user_input:
        event_name = user_input.replace("matches for", "").replace("wrestling event", "").strip()
        print(get_match_results(event_name))

    elif user_input.lower().startswith("show me"):
        query = user_input.replace("show me", "").strip()
        print(search_sql_data(query))
    
    else:
        print(search_sql_data(user_input))
